
class Gap extends Node {
  Gap() {
    code = journal.ItemType.GAP;
  }

  override void create() {
    element = <div style=style.gap hover=style.gap_hover drop=onDrop>
    </div>;
  }

  override void enter() {
    if isEnter { return; }
    base.enter();

    web.dropInit(element);
  }

  override void exit() {
    if !isEnter { return; }

    web.dropUninit(element);

    base.exit();
  }

  bind void onDrop(Tagable element, int x, int y) {
    auto node = null;

    if element.data is null { // add new
      node = createByCode(element.code);
      if node is null { return; }
    } else { // move
      // TODO: send editor message with changes
      node = element.data;
      if node is next { return; } // dont drop on the same place

      if node.prev.code is journal.ItemType.GAP {
        node.prev.remove();
      }
      node.remove();
    }

    // TODO: some hangout bug here

    auto gap = new Gap();
    gap.create();
    gap.parentBlock = parentBlock;

    node.parentBlock = parentBlock;
    parent.insertBefore(node, getId());
    parent.insertBefore(gap, node.getId());
  }
}
