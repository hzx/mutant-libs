
class Root extends Node {
  auto titleEdit = <ui.Edit/>;

  Root() {
    code = journal.ItemType.ROOT;
  }

  override void create() {
    element = <div style=style.root hover=style.root_hover drop=onDrop>
      <div style=style.nodeButtons>
        <div style=style.selectButton></div>
      </div>
      {titleEdit}
    </div>;
  }

  override void enter() {
    if isEnter { return; }
    base.enter();

    web.dropInit(element);
  }

  override void exit() {
    if !isEnter { return; }

    web.dropUninit(element);

    base.exit();
  }

  bind void onDrop(Tagable element, int x, int y) {
    auto node = null;

    if element.data is null { // add new
      node = createByCode(element.code);
      if node is null { return; }
    } else { // move
      // TODO: send editor message with changes
      node = element.data;
      if node is this { return; } // dont self drop

      if node.prev.code is journal.ItemType.GAP {
        node.prev.remove();
      }
      node.remove();
    }

    auto gap = new Gap();
    gap.create();
    gap.parentBlock = this;

    node.parentBlock = this;
    append(gap);
    append(node);
  }
}
