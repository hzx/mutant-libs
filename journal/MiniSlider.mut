
class MiniSlider extends web.View {
  tag prevButton = null;
  tag nextButton = null;
  tag slides = null;
  tag firstSlide = null;

  int bunchCount = 6;
  int slideWidth = 0;
  int slideHeight = 0;
  int ANIM_TIME_PER_SLIDE = 100;
  tag leftId = null;
  tag rightId = null;
  int leftIndex = 0;
  int rightIndex = 0;


  bool isPrevExists = false;
  bool isNextExists = false;

  MiniSlider() {
    style_ = style.miniSlider;
  }

  override void create() {
    // parse size
    auto size = this.item.size.value.split("x");
    slideWidth = size[0];
    slideHeight = size[1];

    prevButton = <div style=style_.prevButton disable=style_.prevDisableButton
        onclick=onPrevClick></div>;

    nextButton = <div style=style_.nextButton disable=style_.nextDisableButton
        onclick=onNextClick></div>;

    slides = <web.CollectionView name="div" collection=this.item.images
      render=renderImage style_=style_.images/>;

    slidesWrap = <div style=style_.imagesWrap>
      {slides}
    </div>;

    // set slides, slidesWrap height
    slidesWrap.getNode().style.height = slideHeight + "px";
    slides.getNode().style.height = slideHeight + "px";
    // set slides width
    slides.getNode().style.width = (this.item.images.count * slideWidth) + "px";


    element = <div style=style_.element>
      {prevButton}
      {nextButton}
      {slidesWrap}
    </div>;
  }

  override void enter() {
    if isEnter { return; }
    base.enter();
    initLeftRightIds();
  }

  bind tag renderImage(journal_model.GalleryImage image) {
    /* if slideCounter is 1 { */
    /*   leftId = image.id.value; */

    /*   browser.log("left image:"); */
    /*   browser.log(image); */
    /* } */

    /* if slideCounter is bunchCount { */
    /*   rightId = image.id.value; */

    /*   browser.log("right image:"); */
    /*   browser.log(image); */
    /* } */

    /* slideCounter = slideCounter + 1; */

    string url = "/static/img/200x200-" + image.filename.value;

    auto img = <img src=url style=style_.image id=image.id.value
        dataId=image.id.value/>;

    img.node.style.width = slideWidth + "px";
    img.node.style.height = slideHeight + "px";

    return img;
  }

  void initLeftRightIds() {
    if this.item.images.count > 0 {
      leftId = this.item.images.first.obj.getId();
      right = this.item.images.getNextRestricted(leftId, bunchCount - 1);

      if right is null {
        rightId = leftId;
      } else {
        rightId = right.getId();
      }

      leftIndex = this.item.images.getIdIndex(leftId);
      rightIndex = this.item.images.getIdIndex(rightId);
    }

    setButtonsState();
  }

  object computePrevOffset() {
    if this.item.images.count is 0 { return null; }
    if leftId is null { initLeftRightIds(); }
    if this.item.images.getPrev(leftId) is null { return null; }

    auto images = this.item.images;

    // find new leftId pos
    auto left = images.getPrevRestricted(leftId, bunchCount);
    if left is null { leftId = rightId }
    else { leftId = left.getId(); }

    // find new rightId relative leftId
    auto right = images.getNextRestricted(leftId, bunchCount - 1);
    if right is null { rightId = leftId; }
    else { rightId = right.getId(); }

    int oldLeftIndex = leftIndex;
    leftIndex = images.getIdIndex(leftId);
    rightIndex = images.getIdIndex(rightId);

    return [slideWidth * leftIndex, oldLeftIndex - leftIndex];
  }

  object computeNextOffset() {
    if this.item.images.count is 0 { return null; }
    if leftId is null { initLeftRightIds(); }
    if this.item.images.getNext(rightId) is null { return null; }

    auto images = this.item.images;

    // find new rightId pos
    auto right = images.getNextRestricted(rightId, bunchCount);
    if right is null { rightId = leftId; }
    else { rightId = right.getId(); }

    // find new leftId relative rightId
    auto left = images.getPrevRestricted(rightId, bunchCount - 1);
    if left is null { leftId = rightId; }
    else { leftId = left.getId(); }

    int oldRightIndex = rightIndex;
    leftIndex = images.getIdIndex(leftId);
    rightIndex = images.getIdIndex(rightId);

    return [slideWidth * leftIndex, rightIndex - oldRightIndex];
  }

  void setPrevButtonState() {
    if leftId isnot null {
      auto prev = this.item.images.getPrev(leftId);

      if prev isnot null {
        isPrevExists = true;
        prevButton.setState(web.STATE_NORMAL);
        return;
      }
    }

    isPrevExists = false;
    prevButton.setState(web.STATE_DISABLE);
  }

  void setNextButtonState() {
    if rightId isnot null {
      auto next = this.item.images.getNext(rightId);
      
      if next isnot null {
        isNextExists = true;
        nextButton.setState(web.STATE_NORMAL);
        return;
      }
    }

    isNextExists = false;
    nextButton.setState(web.STATE_DISABLE);
  }

  void setButtonsState() {
    setPrevButtonState();
    setNextButtonState();
  }

  bind void onPrevClick(object e) {
    if !isPrevExists { return; }

    auto offset = computePrevOffset();
    setButtonsState();
    if offset is null { return; }

    auto node = slides.getNode();
    int from = window.parseInt(node.style.left);
    int to = 0 - offset[0];

    browser.animate(void (float value) { // update
      node.style.left = Math.floor(value) + "px";
    }, void () { // end
      node.style.left = to + "px";
    }, ANIM_TIME_PER_SLIDE * offset[1], browser.animationDelta,
        to, from, browser.easingSineOut);
  }

  bind void onNextClick(object e) {
    if !isNextExists { return; }

    auto offset = computeNextOffset();
    setButtonsState();
    if offset is null { return; }

    auto node = slides.getNode();
    int from = window.parseInt(node.style.left);
    int to = 0 - offset[0];

    browser.animate(void (float value) { // update
      node.style.left = Math.floor(value) + "px";
    }, void () { // end
      node.style.left = to + "px";
    }, ANIM_TIME_PER_SLIDE * offset[1], browser.animationDelta,
        to, from, browser.easingSineOut);
  }
}
