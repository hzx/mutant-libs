
class Gallery extends VerticalNode {
  tag fileDialog = null;
  tag userImages = null;
  tag styleInput = null;
  tag styleNode = null;

  Gallery() {
    code = journal_model.NodeType.GALLERY;
  }

  override void create() {
    createPlaceholders();

    fileDialog = <ui.Upload multiple=true accept="image/\*" onChange=onFileChange/>;
    userImages = <web.CollectionView name="div" collection=item.images
      render=renderImage style_=style_.images/>;

    styleInput = <input style=ui_style.nestedInput
        onfocus=onStyleFocus onblur=onStyleBlur
        onchange=onStyleChange
        bind=item.style render=renderInputValue/>;

    styleNode = <div style=style_.styleNode
        active=style_.styleNode_active onclick=onStyleClick>
      <div style=style_.styleEditWrap>
        /* <div style=style_.label> "Стиль" </div> */
        {styleInput}
      </div>
    </div>;

    element = <div style=style_.node ondragover=onDragover ondragenter=onDragenter ondragleave=onDragleave ondrop=onDrop>
      {topPlaceholder_}
      {bottomPlaceholder_}
      <div style=style_.move draggable=true ondragstart=onDragstart></div>
      {fileDialog}
      <div style=style_.wrap>
        <div style=style_.imagesWrap>
          {userImages}
          <div style=style_.add onclick=onAddClick></div>
        </div>
        {styleNode}
      </div>
    </div>;
  }

  tag createImage(string id, string url, string alt) {
    return <img id=id src=url alt=alt style=style_.image draggable=true
      ondragstart=onImageDragstart/>;
  }

  void renderValue(tag elem, object ovalue) {
    elem.setValue(ovalue.value);
  }

  void renderInputValue(tag input, object ovalue) {
    input.node.value = ovalue.value;
  }

  bind tag renderImage(journal_model.GalleryImage image) {
    string url = "/static/img/300x225-" + image.filename.value;
    return <img src=url style=style_.image draggable=true
      ondragstart=onImageDragstart/>;
  }

  void flushStyle() {
    item.style.set(styleInput.node.value);
  }

  void focusStyle() {
    styleNode.setState(web.STATE_ACTIVE);
    styleInput.node.focus();
  }

  void blurStyle() {
    styleNode.setState(web.STATE_NORMAL);
    flushStyle();
  }

  bind void onUploadBtnClick(object e) {
    fileDialog.click();
  }

  bind void onFileChange(object files) {
    if files.length < 1 { return; }

    auto me = this;
    auto fu = new net.FileUpload();
    fu.polymorph = item.polymorph;
    fu.collection.set(this.itemsColl_);
    fu.field.set(journal_model.GalleryField.IMAGES);
    fu.objId.set(item.id.value);

    net.uploadFiles(files, fu, void (object filenames) { // success
      // debug
      browser.log("Gallery.onFileChange uploadFiles success:");
      browser.log(filenames);

      // add gallery images
      for auto filename: filenames {
        if filename.length > 0 {
          auto image = new journal_model.GalleryImage();
          image.id.set(filename);
          image.filename.set(filename);

          me.item.images.appendLocal(image);
        }
      }
    }, void (int status, string response) { // fail
    }, void (float progress) { // progress
    });

    /* net.postSessionFiles(files, item.id.value, void (object sessionFiles) { // success */
    /* }, void (int status, string response) { // fail */
    /* }, void (float progress) { // progress */
    /* }); */
  }

  bind void onImageDragstart(object e) {
  }

  bind void onAddClick(object e) {
    fileDialog.click();
  }

  bind void onStyleFocus(object e) {
    focusStyle();
  }

  bind void onStyleBlur(object e) {
    blurStyle();
  }

  bind void onStyleChange(object e) {
    flushStyle();
  }

  bind void onStyleClick(object e) {
    focusStyle();
  }
}
