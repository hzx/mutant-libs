
class Text extends VerticalNode {
  static int HEIGHT_DELTA = 24;

  tag textarea_ = null;
  tag areawrap = null;
  tag customStyleInput = null;
  tag customStyleNode = null;

  Text() {
    code = journal_model.NodeType.TEXT;
  }

  override void create() {
    createPlaceholders();

    textarea_ = <textarea style=style_.area active=style_.area_active
        onkeydown=onKeydown onkeyup=onKeyup onchange=onChange onfocus=onFocus
        onblur=onBlur
        bind=item.text render=renderInputValue/>;

    areawrap = <div style=style_.areawrap> {textarea_} </div>;

    customStyleInput = <input style=ui_style.nestedInput
        onfocus=onCustomStyleFocus onblur=onCustomStyleBlur
        onchange=onStyleChange
        bind=item.style render=renderInputValue/>;

    customStyleNode = <div style=style_.customStyleNode
        active=style_.customStyleNode_active onclick=onCustomStyleClick>
      <div style=style_.editwrap>
        <div style=style_.label> "Стиль" </div>
        {customStyleInput}
      </div>
    </div>;

    element = <div style=style_.node active=style_.node_active
        ondragover=onDragover ondragenter=onDragenter ondragleave=onDragleave
        ondrop=onDrop>
      {topPlaceholder_}
      {bottomPlaceholder_}
      <div style=style_.move draggable=true ondragstart=onDragstart></div>
      <div style=style_.wrap>
        {areawrap}
        {customStyleNode}
      </div>
    </div>;
  }

  override void enter() {
    if isEnter { return; }
    base.enter();

    tuneHeight();
  }

  void renderInputValue(tag input, object ovalue) {
    input.node.value = ovalue.value;
  }

  void flushText() {
    item.text.set(textarea_.node.value);
  }

  void flushStyle() {
    item.style.set(customStyleInput.node.value);
  }

  void focus() {
    element.setState(web.STATE_ACTIVE);
    textarea_.setState(web.STATE_ACTIVE);
    textarea_.node.focus();
  }

  void blur() {
    element.setState(web.STATE_NORMAL);
    textarea_.setState(web.STATE_NORMAL);
    flushText();
  }

  void focusCustomStyle() {
    customStyleNode.setState(web.STATE_ACTIVE);
    customStyleInput.node.focus();
  }

  void blurCustomStyle() {
    customStyleNode.setState(web.STATE_NORMAL);
    flushStyle();
  }

  void tuneHeight() {
    int scroll = textarea_.node.scrollHeight;
    int client = areawrap.node.clientHeight;

    if scroll > client {
      areawrap.node.style.height = (scroll + Text.HEIGHT_DELTA) + "px";
    }
  }

  void shrinkHeight() {
    // try minimal size
    areawrap.node.style.height = "auto";
    tuneHeight();
  }

  bind void onKeydown(object e) {
    switch e.keyCode {
      case 9: // tab
        e.preventDefault();
        break;
    }
  }

  bind void onKeyup(object e) {
    switch e.keyCode {
      case 27: // escape
        clear();
        break;
      case 9: // tab
        e.preventDefault();
        int selstart = textarea_.node.selectionStart;
        string value = textarea_.node.value;
        textarea_.node.value = value.substring(0, selstart) + "\t"
          + value.substring(textarea_.node.selectionEnd);
        textarea_.node.selectionEnd = selstart + 1;
        return;
      case 8: // backspace
      case 46: // delete
        shrinkHeight();
        break;
      default:
        tuneHeight();
        break;
    }
    /* value.set(textarea_.node.value); */
  }

  bind void onChange(object e) {
    flushText();
  }

  bind void onFocus(object e) {
    focus();
  }

  bind void onBlur(object e) {
    blur();
  }

  bind void onCustomStyleFocus(object e) {
    focusCustomStyle();
  }

  bind void onCustomStyleBlur(object e) {
    blurCustomStyle();
  }

  bind void onCustomStyleClick(object e) {
    focusCustomStyle();
  }

  bind void onStyleChange(object e) {
    flushStyle();
  }
}
