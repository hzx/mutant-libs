
class Text extends VerticalNode {
  static int HEIGHT_DELTA = 24;
  tag textarea_ = null;
  tag areawrap = null;

  Text() {
    code = journal.NodeType.TEXT;
  }

  override string serialize() {
    object buf = [];
    buf.push(code);
    buf.push(textarea_.node.value);

    return buf.join(container.DELIM_FIELD);
  }

  override void unserialize(object fields) {
    textarea_.node.value = fields[1];
  }

  override void create() {
    createPlaceholders();

    textarea_ = <textarea style=style_.area active=style_.area_active onkeydown=onKeydown onkeyup=onKeyup onchange=onChange onfocus=onFocus onblur=onBlur/>;
    areawrap = <div style=style_.areawrap> {textarea_} </div>;

    element = <div style=style_.node active=style_.node_active onclick=onClick ondragover=onDragover ondragenter=onDragenter ondragleave=onDragleave ondrop=onDrop>
      {topPlaceholder_}
      {bottomPlaceholder_}
      <div style=style_.move draggable=true ondragstart=onDragstart></div>
      <div style=style_.wrap>
        {areawrap}
      </div>
    </div>;
  }

  void focus() {
    element.setState(web.STATE_ACTIVE);
    textarea_.setState(web.STATE_ACTIVE);
    textarea_.node.focus();
  }

  void blur() {
    element.setState(web.STATE_NORMAL);
    textarea_.setState(web.STATE_NORMAL);
  }

  void tuneHeight() {
    int scroll = textarea_.node.scrollHeight;
    int client = areawrap.node.clientHeight;

    if scroll > client {
      areawrap.node.style.height = (scroll + Text.HEIGHT_DELTA) + "px";
    }
  }

  void shrinkHeight() {
    // try minimal size
    areawrap.node.style.height = "auto";
    tuneHeight();
  }

  bind void onClick(object e) {
    focus();
  }

  bind void onKeydown(object e) {
    switch e.keyCode {
      case 9: // tab
        e.preventDefault();
        break;
    }
  }

  bind void onKeyup(object e) {
    switch e.keyCode {
      case 27: // escape
        clear();
        break;
      case 9: // tab
        e.preventDefault();
        int selstart = textarea_.node.selectionStart;
        string value = textarea_.node.value;
        textarea_.node.value = value.substring(0, selstart) + "\t"
          + value.substring(textarea_.node.selectionEnd);
        textarea_.node.selectionEnd = selstart + 1;
        return;
      case 8: // backspace
      case 46: // delete
        shrinkHeight();
        break;
      default:
        tuneHeight();
        break;
    }
    /* value.set(textarea_.node.value); */
  }

  bind void onChange(object e) {
  }

  bind void onFocus(object e) {
    focus();
  }

  bind void onBlur(object e) {
    blur();
  }
}
