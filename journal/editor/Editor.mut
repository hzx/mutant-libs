
class Editor extends web.View {
  object journal_ = null;
  object journalItems_ = null;

  int toolbarTop = 0;

  auto toolbar = createToolbar();
  /* auto root = new Block(); */
  auto root = null;

  // data
  string journalId = null;

  auto eventSave = new container.Event();

  Editor() {
    /* root.create(); */
    /* root.editor = this; */
  }

  override void create() {
    root = <web.CollectionView name="div" collection=journalItems_
        render=renderItem style_=style.rootNode/>;

    element = <div style=style.editor>
      {toolbar}
      <div style=style.block ondragenter=onBlockDragenter
          ondragleave=onBlockDragleave ondragover=onBlockDragover
          ondrop=onBlockDrop>
        {root}
      </div>
    </div>;
  }

  bind tag renderItem(container.Model item) {
    auto node = createNode(item.nodeType);
    if node is null { return null; }
    node.editor = this;
    node.item = item;
    node.create();

    return node;
  }

  override void enter() {
    if isEnter { return; }
    base.enter();

    /* toolbarTop = browser.posY(toolbar.node); */
    toolbarTop = 4; // take this value from style

    if browser.scrollNode isnot null {
      browser.addEvent(browser.scrollNode, "scroll", onScroll);
    }
  }

  override void exit() {
    if !isEnter { return; }

    if browser.scrollNode isnot null {
      browser.removeEvent(browser.scrollNode, "scroll", onScroll);
    }

    toolbar.node.style.top = toolbarTop + "px";

    base.exit();
  }

  tag createToolbar() {
    return <div style=style.toolbar>
      <div style=style.blockBtn draggable=true ondragstart=onBlockDragstart></div>
      <div style=style.h1Btn draggable=true ondragstart=onH1Dragstart></div>
      <div style=style.h2Btn draggable=true ondragstart=onH2Dragstart></div>
      <div style=style.textBtn draggable=true ondragstart=onTextDragstart></div>
      <div style=style.codeBtn draggable=true ondragstart=onCodeDragstart></div>
      <div style=style.linkBtn draggable=true ondragstart=onLinkDragstart></div>
      <div style=style.videoBtn draggable=true ondragstart=onVideoDragstart></div>
      <div style=style.googleMapBtn draggable=true ondragstart=onGoogleMapDragstart></div>
      <div style=style.fileBtn draggable=true ondragstart=onFileDragstart></div>
      <div style=style.imageBtn draggable=true ondragstart=onImageDragstart></div>
      <div style=style.galleryBtn draggable=true ondragstart=onGalleryDragstart></div>
      <div style=style.bigSliderBtn draggable=true ondragstart=onBigSliderDragstart></div>
      <div style=style.miniSliderBtn draggable=true ondragstart=onMiniSliderDragstart></div>
      <div style=style.anchorBtn draggable=true ondragstart=onAnchorDragstart></div>
      <div style=style.breakBtn draggable=true ondragstart=onBreakDragstart></div>
      <div style=style.saveBtn onclick=onSaveClick></div>
      <div style=style.trashBtn ondragenter=onTrashDragenter ondragleave=onTrashDragleave ondragover=onTrashDragover ondrop=onTrashDrop></div>
    </div>;
  }

  container.Model createNodeModel(int nodeType) {
    container.Model node = null;

    switch nodeType {
      case journal_model.NodeType.BLOCK:
        break;
      case journal_model.NodeType.H1:
        // check h1 already added, add only once
        if !isH1Exists() {
          node = new journal_model.Header();
        }
        break;
      case journal_model.NodeType.H2:
        node = new journal_model.Header2();
        break;
      case journal_model.NodeType.TEXT:
        node = new journal_model.Text();
        break;
      case journal_model.NodeType.CODE:
        node = new journal_model.Code();
        break;
      case journal_model.NodeType.LINK:
        node = new journal_model.Link();
        break;
      case journal_model.NodeType.VIDEO:
        node = new journal_model.Video();
        break;
      case journal_model.NodeType.GOOGLE_MAP:
        node = new journal_model.GoogleMap();
        break;
      case journal_model.NodeType.FILE:
        node = new journal_model.File();
        break;
      case journal_model.NodeType.IMAGE:
        node = new journal_model.Image();
        break;
      case journal_model.NodeType.GALLERY:
        node = new journal_model.Gallery();
        break;
      case journal_model.NodeType.BIG_SLIDER:
        node = new journal_model.BigSlider();
        break;
      case journal_model.NodeType.MINI_SLIDER:
        node = new journal_model.MiniSlider();
        break;
      case journal_model.NodeType.ANCHOR:
        node = new journal_model.Anchor();
        break;
      case journal_model.NodeType.BREAK:
        node = new journal_model.Break();
        break;
    }

    return node;
  }

  tag createNode(int nodeType) {
    Node node = null;

    switch nodeType {
      case journal_model.NodeType.BLOCK:
        node = new Block();
        node.style_ = style.block;
        break;
      case journal_model.NodeType.H1:
        node = new Header1();
        node.style_ = style.header;
        break;
      case journal_model.NodeType.H2:
        node = new Header2();
        node.style_ = style.header;
        break;
      case journal_model.NodeType.TEXT:
        node = new Text();
        node.style_ = style.text;
        break;
      case journal_model.NodeType.CODE:
        node = new Code();
        node.style_ = style.code;
        break;
      case journal_model.NodeType.LINK:
        node = new Link();
        node.style_ = style.link;
        break;
      case journal_model.NodeType.VIDEO:
        node = new Video();
        node.style_ = style.video;
        break;
      case journal_model.NodeType.GOOGLE_MAP:
        node = new GoogleMap();
        node.style_ = style.googleMap;
        break;
      case journal_model.NodeType.FILE:
        node = new File();
        node.style_ = style.file;
        break;
      case journal_model.NodeType.IMAGE:
        node = new Image();
        node.style_ = style.image;
        break;
      case journal_model.NodeType.GALLERY:
        node = new Gallery();
        node.style_ = style.gallery;
        break;
      case journal_model.NodeType.BIG_SLIDER:
        node = new BigSlider();
        node.style_ = style.bigSlider;
        break;
      case journal_model.NodeType.MINI_SLIDER:
        node = new MiniSlider();
        node.style_ = style.miniSlider;
        break;
      case journal_model.NodeType.ANCHOR:
        node = new Anchor();
        node.style_ = style.anchor;
        break;
      case journal_model.NodeType.BREAK:
        node = new Break();
        node.style_ = style.break_;
        break;
    }

    return node;
  }

  // interface methods for Node

  bool isH1Exists() {
    auto cursor = journalItems_.first;
    while cursor isnot null {
      if cursor.obj.nodeType is journal_model.NodeType.H1 {
        return true;
      }
      cursor = cursor.next;
    }

    return false;
  }

  void addNode(int nodeType, string beforeId) {
    auto obj = createNodeModel(nodeType);
    if obj is null { return; } // unknown nodeType

    journalItems_.insertBefore(obj, beforeId);
  }

  void moveNode(string nodeId, Node before) {
    auto node = root.getChild(nodeId);

    if before isnot null {
      root.moveChild(node, before.getId());
    } else {
      root.moveChild(node, null);
    }
    // move in collection
  }

  void removeNode(string id) {
    journalItems_.remove(id);
  }

  // end interface for Node

  bind void onScroll(object e) {
    int scroll = browser.scrollNode.scrollTop;
    if scroll > toolbarTop {
      toolbar.node.style.top = scroll + "px";
    } else {
      toolbar.node.style.top = toolbarTop + "px";
    }
  }

  bind void onBlockDragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.BLOCK);
  }

  bind void onH1Dragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.H1);
  }

  bind void onH2Dragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.H2);
  }

  bind void onTextDragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.TEXT);
  }

  bind void onCodeDragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.CODE);
  }

  bind void onLinkDragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.LINK);
  }

  bind void onVideoDragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.VIDEO);
  }

  bind void onGoogleMapDragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.GOOGLE_MAP);
  }

  bind void onFileDragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.FILE);
  }

  bind void onImageDragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.IMAGE);
  }

  bind void onGalleryDragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.GALLERY);
  }

  bind void onBigSliderDragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.BIG_SLIDER);
  }

  bind void onMiniSliderDragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.MINI_SLIDER);
  }

  bind void onAnchorDragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.ANCHOR);
  }

  bind void onBreakDragstart(object e) {
    e.dataTransfer.setData("text/plain", "add:" + journal_model.NodeType.BREAK);
  }

  bind void onSaveClick(object e) {
    string data = root.serialize();
    eventSave.notify2(journalId, data);
  }

  bind void onTrashDragenter(object e) {
    e.preventDefault();
  }

  bind void onTrashDragleave(object e) {
  }

  bind void onTrashDragover(object e) {
    e.preventDefault();
  }

  bind void onTrashDrop(object e) {
    e.preventDefault();
    string data = e.dataTransfer.getData("text/plain");

    if data is null or data.length is 0 { return; }

    object fields = data.split(":");
    if fields.length < 2 { return; }

    string action = fields[0];
    if action isnot "move" { return; }

    string id = fields[1];
    
    journalItems_.remove(id);
  }

  bind void onBlockDragenter(object e) {
    e.preventDefault();
  }

  bind void onBlockDragleave(object e) {
  }

  bind void onBlockDragover(object e) {
    e.preventDefault();
  }

  bind void onBlockDrop(object e) {
    e.preventDefault();
    string data = e.dataTransfer.getData("text/plain");

    object fields = data.split(":");
    if fields.length < 2 { return; }


    switch fields[0] { // operation type
      case "add":
        // fields[1] contains node type
        int nodeType = window.parseInt(fields[1]);
        journalItems_.append(createNodeModel(nodeType));
        /* addNode(nodeType, null); */
        break;
      case "move":
        // fields[1] contains node id
        /* Node node = element.getChild(fields[1]); */
        /* moveNode(node, null); */
        /* journalItems_.move */
        break;
    }
  }
}
