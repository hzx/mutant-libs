
class Header1 extends VerticalNode {
  // set this after creation
  Journal journal_ = null;

  tag nameInput = null;
  tag nameNode = null;
  tag slugNode = null;
  tag keywordsNode = null;
  tag descriptionInput = null;
  tag descriptionWrap = null;
  tag descriptionNode = null;
  tag styleInput = null;
  tag styleNode = null;

  Header1() {
    code = journal_model.NodeType.H1;
  }

  override void create() {
    createPlaceholders();

    nameInput = <input style=ui_style.nestedInput onfocus=onNameFocus
        onblur=onNameBlur onchange=onNameChange
        bind=journal_.name render=renderInputValue/>;

    nameNode = <div style=style_.nameNode active=style_.nameNode_active
        onclick=onNameClick>
      <div style=style_.editwrap>
        <div style=style_.label> "Название" </div>
        {nameInput}
      </div>
    </div>;

    slugNode = <div style=style_.slugNode bind=journal_.slug
        render=renderValue></div>;
    
    keywordsNode = <div style=style_.keywordsNode bind=journal_.keywords
        render=renderValue></div>;

    descriptionInput = <textarea style=style_.descriptionArea
        onkeydown=onDescriptionKeydown onkeyup=onDescriptionKeyup
        onchange=onDescriptionChange
        onfocus=onDescriptionFocus onblur=onDescriptionBlur
        bind=journal_.description render=renderInputValue/>;

    descriptionWrap = <div> {descriptionInput} </div>;

    descriptionNode = <div style=style_.descriptionNode
        active=style_.descriptionNode_active onclick=onDescriptionClick>
      <div style=style_.editwrap>
        <div style=style_.seoLabel> "Описание (SEO)" </div>
        {descriptionWrap}
      </div>
    </div>;

    styleInput = <input style=ui_style.nestedInput
        onfocus=onStyleFocus onblur=onStyleBlur
        onchange=onStyleChange
        bind=item.style render=renderInputValue/>;

    styleNode = <div style=style_.styleNode
        active=style_.styleNode_active onclick=onStyleClick>
      <div style=style_.styleEditWrap>
        /* <div style=style_.label> "Стиль" </div> */
        {styleInput}
      </div>
    </div>;

    element = <div style=style_.h1 active=style_.header_active
        ondragover=onDragover ondragenter=onDragenter ondragleave=onDragleave
        ondrop=onDrop>
      {topPlaceholder_}
      {bottomPlaceholder_}
      <div style=style_.h1Move draggable=true ondragstart=onDragstart></div>
      <div style=style_.wrap>
        {nameNode}
        {slugNode}
        {keywordsNode}
        {descriptionNode}
        {styleNode}
      </div>
    </div>;
  }

  void renderValue(tag elem, object ovalue) {
    elem.setValue(ovalue.value);
  }

  void renderInputValue(tag input, object ovalue) {
    input.node.value = ovalue.value;
  }

  override void enter() {
    if isEnter { return; }
    base.enter();

    descriptionTuneHeight();
  }

  void flushName() {
    journal_.name.set(nameInput.node.value);
  }

  void flushDescription() {
    journal_.description.set(descriptionInput.node.value);
  }

  void flushStyle() {
    item.style.set(styleInput.node.value);
  }

  void focusName() {
    nameNode.setState(web.STATE_ACTIVE);
    nameInput.node.focus();
  }

  void blurName() {
    nameNode.setState(web.STATE_NORMAL);
    flushName();
  }

  void descriptionTuneHeight() {
    int scroll = descriptionInput.node.scrollHeight;
    int client = descriptionWrap.node.clientHeight;

    if scroll > client {
      descriptionWrap.node.style.height = (scroll + Text.HEIGHT_DELTA) + "px";
    }
  }

  void descriptionShrinkHeight() {
    // try minimal size
    descriptionWrap.node.style.height = "auto";
    descriptionTuneHeight();
  }

  void focusDescription() {
    descriptionNode.setState(web.STATE_ACTIVE);
    descriptionInput.node.focus();
  }

  void blurDescription() {
    descriptionNode.setState(web.STATE_NORMAL);
    flushDescription();
  }

  void focusStyle() {
    styleNode.setState(web.STATE_ACTIVE);
    styleInput.node.focus();
  }

  void blurStyle() {
    styleNode.setState(web.STATE_NORMAL);
    flushStyle();
  }

  bind void onNameFocus(object e) {
    focusName();
  }

  bind void onNameBlur(object e) {
    blurName();
  }

  bind void onNameChange(object e) {
    journal_.name.set(nameInput.node.value);
  }

  bind void onNameClick(object e) {
    focusName();
  }

  bind void onDescriptionFocus(object e) {
    focusDescription();
  }

  bind void onDescriptionBlur(object e) {
    blurDescription();
  }

  bind void onDescriptionClick(object e) {
    focusDescription();
  }

  bind void onDescriptionKeydown(object e) {
    switch e.keyCode {
      case 9: // tab
        e.preventDefault();
        break;
    }
  }

  bind void onDescriptionKeyup(object e) {
    switch e.keyCode {
      case 27: // escape
        clear();
        break;
      case 9: // tab
        e.preventDefault();
        int selstart = descriptionInput.node.selectionStart;
        string value = descriptionInput.node.value;
        descriptionInput.node.value = value.substring(0, selstart) + "\t"
          + value.substring(descriptionInput.node.selectionEnd);
        descriptionInput.node.selectionEnd = selstart + 1;
        return;
      case 8: // backspace
      case 46: // delete
        descriptionShrinkHeight();
        break;
      default:
        descriptionTuneHeight();
        break;
    }
  }

  bind void onDescriptionChange(object e) {
    flushDescription();
  }

  bind void onStyleFocus(object e) {
    focusStyle();
  }

  bind void onStyleBlur(object e) {
    blurStyle();
  }

  bind void onStyleChange(object e) {
    flushStyle();
  }

  bind void onStyleClick(object e) {
    focusStyle();
  }
}


