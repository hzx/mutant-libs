
class Header1 extends Node {
  tag input_ = null;

  Header1() {
    code = journal.NodeType.H1;
  }

  override void create() {
    input_ = <input style=style_.headerInput active=style_.headerInput_active onfocus=onFocus onblur=onBlur/>;

    // TODO: think about ondragmove
    element = <div style=style_.h1 active=style_.header_active onclick=onClick ondragover=onDragover ondragenter=onDragenter ondragleave=onDragleave ondrop=onDrop>
      <div style=style_.wrap>
        <div style=style_.h1Move draggable=true ondragstart=onDragstart></div>
        {input_}
      </div>
    </div>;
  }

  override string serialize() {
    object buf = [];
    buf.push(code);
    buf.push(input_.node.value);

    return buf.join(container.DELIM_FIELD);
  }

  override void unserialize(object fields) {
    input_.node.value = fields[1];
  }

  void focus() {
    element.setState(web.STATE_ACTIVE);
    input_.setState(web.STATE_ACTIVE);
    input_.node.focus();
  }

  void blur() {
    element.setState(web.STATE_NORMAL);
    input_.setState(web.STATE_NORMAL);
  }

  bind void onClick(object e) {
    focus();
  }

  bind void onFocus(object e) {
    focus();
  }

  bind void onBlur(object e) {
    blur();
  }

  bind void onDragstart(object e) {
    e.dataTransfer.setData("text/plain", "move:" + id);
  }

  bind void onDragover(object e) {
    e.preventDefault();
  }

  bind void onDragenter(object e) {
    e.preventDefault();
    // TODO: show drop placeholder
  }

  bind void onDragleave(object e) {
    // TODO: hide drop placeholder
  }

  bind void onDrop(object e) {
    e.preventDefault();
    // TODO: send parent message to drop node
    // TODO: hide drop placeholder
  }
}


class Header2 extends Header1 {
  Header2() {
    code = journal.NodeType.H2;
  }

  override void create() {
    input_ = <input style=style_.headerInput active=style_.headerInput_active onfocus=onFocus onblur=onBlur/>;

    element = <div style=style_.h2 active=style_.header_active onclick=onClick>
      <div style=style_.wrap>
        <div style=style_.h2Move draggable=true ondragstart=onDragstart></div>
        {input_}
      </div>
    </div>;
  }
}
