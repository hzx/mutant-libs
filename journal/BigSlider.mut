
class BigSlider extends web.View {
  tag prevButton = null;
  tag nextButton = null;
  tag slides = null;

  int slideWidth = 0;
  int slideHeight = 0;
  int ANIM_TIME = 500;

  tag currentId = null;
  tag prevId = null;
  tag nextId = null;


  BigSlider() {
    style_ = style.bigSlider;
  }

  override void create() {
    // parse size
    auto size = this.item.size.value.split("x");
    slideWidth = size[0];
    slideHeight = size[1];

    prevButton = <div style=style_.prevButton disable=style_.prevDisableButton
        onclick=onPrevClick></div>;

    nextButton = <div style=style_.nextButton disable=style_.nextDisableButton
        onclick=onNextClick></div>;

    slides = <web.CollectionView name="div" collection=this.item.images
      render=renderImage style_=style_.slides/>;

    element = <div style=style_.element>
      {prevButton}
      {nextButton}
      {slides}
    </div>;
  }

  void enter() {
    if isEnter { return; }
    base.enter();

    // init current slide
    auto id = getCurrentId();
    if id isnot null {
      auto current = slides.getChild(id);
      current.node.style.zIndex = 4;
    }
  }

  bind tag renderImage(journal_model.GalleryImage image) {
    auto buf = ["/static/img/", this.item.size.value, "-", image.filename.value];

    string url = buf.join("");

    auto img = <img src=url style=style_.slide id=image.id.value
        dataId=image.id.value/>;

    img.node.style.width = slideWidth + "px";
    img.node.style.height = slideHeight + "px";

    return img;
  }

  void getCurrentId() {
    if currentId is null {
      auto first = this.item.images.getFirst();
      currentId = first.getId();
    }
    return currentId;
  }

  void getPrevId() {
    auto prev = this.item.images.getPrev(currentId);
    if prev is null {
      auto last = this.item.images.getLast();
      if last is null { return null; }
      return last.getId();
    }
    return prev.getId();
  }

  void getNextId() {
    auto next = this.item.images.getNext(currentId);
    if next is null {
      auto first = this.item.images.getFirst();
      if first is null { return null; }
      return first.getId();
    }
    return next.getId();
  }

  void slidePrev() {
    if this.item.images.count < 2 { return; }

    auto current = slides.getChild(getCurrentId());
    auto prev = slides.getChild(getPrevId());

    int from = (0 - slideHeight);
    int to = 0;

    current.node.style.zIndex = 3;
    current.node.style.left = 0;
    current.node.style.top = 0;

    // new current
    currentId = prev.getId();
    prev.node.style.zIndex = 4;
    prev.node.style.left = 0;
    prev.node.style.top = from + "px";

    browser.animate(void (float value) { // update
      prev.node.style.top = Math.round(value) + "px";
    }, void () { // end
      prev.node.style.top = to + "px";
      current.node.style.zIndex = 2;
    }, ANIM_TIME, browser.animationDelta, to, from, browser.easingBounceOut);
  }

  void slideNext() {
    if this.item.images.count < 2 { return; }

    auto current = slides.getChild(getCurrentId());
    auto next = slides.getChild(getNextId());

    int from = (0 - slideHeight);
    int to = 0;

    current.node.style.zIndex = 3;
    current.node.style.left = 0;
    current.node.style.top = 0;

    // new current
    currentId = next.getId();
    next.node.style.zIndex = 4;
    next.node.style.left = 0;
    next.node.style.top = from + "px";

    browser.animate(void (float value) { // update
      next.node.style.top = Math.round(value) + "px";
    }, void () { // end
      next.node.style.top = to + "px";
      current.node.style.zIndex = 2;
    }, ANIM_TIME, browser.animationDelta, to, from, browser.easingBounceOut);
  }

  bind void onPrevClick(object e) {
    slidePrev();
  }

  bind void onNextClick(object e) {
    slideNext();
  }
}
