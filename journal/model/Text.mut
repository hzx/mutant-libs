
class Text extends container.Model {
  auto pageId = new container.String();
  auto style = new container.String();
  auto text = new container.String();

  Text() {
    polymorph = NodeType.TEXT;

    enter();
  }

  void setField(string key, string value) {
    int field = window.parseInt(key);
    switch field {
      case container.ModelField.ID:
        id.init(value);
        break;
      case TextField.PAGE_ID:
        pageId.init(value);
        break;
      case TextField.STYLE:
        style.init(value);
        break;
      case TextField.TEXT:
        text.init(value);
        break;
    }
  }

  void enter() {
    style.listen(onStyleUpdate);
    text.listen(onTextUpdate);
  }

  void exit() {
    style.unlisten(onStyleUpdate);
    text.unlisten(onTextUpdate);
  }

  string serialize() {
    auto buf = [];

    if id.has { buf.push(container.ModelField.ID, id.value); }
    if pageId.has { buf.push(TextField.PAGE_ID, pageId.value); }
    if style.has { buf.push(TextField.STYLE, style.value); }
    if text.has { buf.push(TextField.TEXT, text.value); }

    return buf.join(container.DELIM_FIELD);
  }

  void unserialize(object pices) {
    for int i = 0; i < pices.length; i=i+2 {
      setField(pices[i], pices[i+1]);
    }
  }

  bind void onStyleUpdate(string val, string old) {
    eventUpdate.notify2(id.value, [
      TextField.STYLE, val,
    ]);
  }

  bind void onTextUpdate(string val, string old) {
    eventUpdate.notify2(id.value, [
      TextField.TEXT, val,
    ]);
  }
}


enum TextField {
  PAGE_ID = 3, // container.ModelField.ID + TYPE + 1,
  STYLE,
  TEXT,
}
