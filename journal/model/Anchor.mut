
class Anchor extends container.Model {
  auto pageId = new container.String();
  auto style = new container.String();
  auto name = new container.String();

  Anchor() {
    polymorph = NodeType.ANCHOR;

    enter();
  }

  void setField(string key, string value) {
    int field = window.parseInt(key);
    switch field {
      case container.ModelField.ID:
        id.set(value);
        break;
      case AnchorField.PAGE_ID:
        pageId.set(value);
        break;
      case AnchorField.STYLE:
        style.set(value);
        break;
      case AnchorField.NAME:
        name.set(value);
        break;
    }
  }

  void enter() {
    style.listen(onStyleUpdate);
    name.listen(onNameUpdate);
  }

  void exit() {
    style.unlisten(onStyleUpdate);
    name.unlisten(onNameUpdate);
  }

  string serialize() {
    auto buf = [];

    if id.has { buf.push(container.ModelField.ID, id.value); }
    if pageId.has { buf.push(AnchorField.PAGE_ID, pageId.value); }
    if style.has { buf.push(AnchorField.STYLE, style.value); }
    if name.has { buf.push(AnchorField.NAME, name.value); }

    return buf.join(container.DELIM_FIELD);
  }

  void unserialize(object pices) {
    for int i = 0; i < pices.length; i=i+2 {
      setField(pices[i], pices[i+1]);
    }
  }

  bind void onStyleUpdate(string val, string old) {
    eventUpdate.notify2(id.value, [
      AnchorField.STYLE, val,
    ]);
  }

  bind void onNameUpdate(string val, string old) {
    eventUpdate.notify2(id.value, [
      AnchorField.NAME, val,
    ]);
  }
}


enum AnchorField {
  PAGE_ID = 3, // container.ModelField.ID + TYPE + 1,
  STYLE,
  NAME,
}
