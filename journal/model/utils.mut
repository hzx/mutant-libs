

object sortModels(object order, object buf) {
  object sorted = [];
  string id;

  for int i = 0; i < order.length; ++i { // walk by ordered ids
    id = order[i];
    for object obj: buf { // search obj in buffer and add to sorted
      if obj.id.value is id {
        sorted.push(obj);
        break;
      }
    }
  }

  return sorted;
}

object createItem(int type) {
  switch type {
    case NodeType.BLOCK:
      return new Block();
    case NodeType.H1:
      return new Header();
    case NodeType.H2:
      return new Header2();
    case NodeType.TEXT:
      return new Text();
    case NodeType.CODE:
      return new Code();
    case NodeType.LINK:
      return new Link();
    case NodeType.VIDEO:
      return new Video();
    case NodeType.GOOGLE_MAP:
      auto node = new GoogleMap();
      node.zoom.set(16);
      node.lat.set(0.0);
      node.lng.set(0.0);
      return node;
    case NodeType.FILE:
      return new File();
    case NodeType.IMAGE:
      return new Image();
    case NodeType.GALLERY:
      return new Gallery();
    case NodeType.BIG_SLIDER:
      return new BigSlider();
    case NodeType.MINI_SLIDER:
      return new MiniSlider();
    case NodeType.ANCHOR:
      return new Anchor();
    case NodeType.BREAK:
      return new Break();
  }
  
  return null;
}

void parsePageItems(string data, container.ObservableCollection items) {
  object rows = data.split(container.DELIM_ROW);
  parsePageItems_(rows, 0, items);
}

void parsePageItems_(object rows, int left, container.ObservableCollection items) {
  int nodeType;
  object pices;

  if rows.length - left < 3 { return; }

  // first row contain order ids
  string s_order = rows[left];
  object order = s_order.split(",");

  object buf = [];

  // object consists:
  // 1 row nodeType
  // 1 row fields
  for int i = left + 1; i < rows.length; i = i + 2 { // parse items and place to buf
    nodeType = window.parseInt(rows[i]); 
    auto item = createItem(nodeType);

    if item is null { continue; } // unknown nodeType

    pices = rows[i + 1].split(container.DELIM_FIELD);
    item.unserializeLocal(pices);

    buf.push(item);
  }

  // sort items and add to collection
  buf = sortModels(order, buf);
  for auto item: buf {
    items.appendLocal(item);
  }
}


void parsePage(string data, Journal doc, container.ObservableItems items) {
  if data.length is 0 { return; }

  object rows = data.split(container.DELIM_ROW);
  if rows.length <= 3 { return; }

  doc.unserializeLocal(data.split(container.DELIM_FIELD));

  parsePageItems_(rows, 1, items);
}
