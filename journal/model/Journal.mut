
class Journal extends container.Model {
  auto name = new container.String();
  auto slug = new container.String();
  auto keywords = new container.String();
  auto description = new container.String();
  auto show = new container.Bool();

  Journal() {
    name.code = JournalField.NAME;
    slug.code = JournalField.SLUG;
    keywords.code = JournalField.KEYWORDS;
    description.code = JournalField.DESCRIPTION;
    show.code = JournalField.SHOW;

    enter();
  }

  void setField(string key, string value) {
    int field = window.parseInt(key);

    switch field {
      case container.ModelField.ID:
        id.set(value);
        break;
      case JournalField.NAME:
        name.set(value);
        break;
      case JournalField.SLUG:
        slug.set(value);
        break;
      case JournalField.KEYWORDS:
        keywords.set(value);
        break;
      case JournalField.DESCRIPTION:
        description.set(value);
        break;
      case JournalField.SHOW:
        int val = window.parseInt(value, 10);
        show.set(val is 1);
        break;
    }
  }

  void enter() {
    name.listen(onNameUpdate);
    description.listen(onDescriptionUpdate);
    show.listen(onShowUpdate);
  }

  void exit() {
    name.unlisten(onNameUpdate);
    description.unlisten(onDescriptionUpdate);
    show.unlisten(onShowUpdate);
  }

  string serialize() {
    auto buf = [];

    if id.has { buf.push(container.ModelField.ID, id.value); }
    if name.has { buf.push(JournalField.NAME, name.value); }
    if slug.has { buf.push(JournalField.SLUG, slug.value); }
    if keywords.has { buf.push(JournalField.KEYWORDS, keywords.value); }
    if description.has { buf.push(JournalField.DESCRIPTION, description.value); }
    if show.has {
      buf.push(JournalField.SHOW);
      if show.value {
        buf.push("1");
      } else {
        buf.push("0");
      }
    }

    return buf.join(container.DELIM_FIELD);
  }

  void unserialize(object pices) {
    for int i = 0; i < pices.length; i=i+2 {
      setField(pices[i], pices[i+1]);
    }
  }

  bind void onNameUpdate(string val, string old) {
    // debug
    console.log("Journal.onNameUpdate, name: " + val);

    eventUpdate.notify2(id.value, [
      JournalField.NAME, name.value,
    ]);
  }

  bind void onDescriptionUpdate(string val, string old) {
    eventUpdate.notify2(id.value, [
      JournalField.DESCRIPTION, description.value,
    ]);
  }

  bind void onShowUpdate(bool val, bool old) {
    bool num = 0;
    if val { num = 1; }

    eventUpdate.notify2(id.value, [
      JournalField.SHOW, num,
    ]);
  }
}


enum JournalField {
  NAME = 2, // container.ModelField.ID + 1,
  SLUG,
  KEYWORDS,
  DESCRIPTION,
  SHOW,
  ITEMS,
}
