
class PagingSearch extends container.Model {
  static int COUNT_PER_PAGE = 16;

  auto query = new container.String();
  auto leftId = new container.String();
  auto rightId = new container.String();
  auto pageCount = new container.Int();
  auto leftExists = new container.Bool();
  auto rightExists = new container.Bool();

  // non serializable field
  auto pageNumber = new container.Int();

  // generated from query
  auto queryTags = [];

  static int counterToPages(int count, int perPage) {
    if count is 0 { return 1; }

    int pages = Math.floor(count / perPage);
    int rem = count - pages * perPage;
    if rem > 0 {
      pages = pages + 1;
    }

    return pages;
  }

  void enter() {}

  void exit() {}

  void setField(int field, string value) {
    switch field {
      case PagingSearchField.QUERY:
        query.set(value);
        break;
      case PagingSearchField.LEFT_ID:
        leftId.set(value);
        break;
      case PagingSearchField.RIGHT_ID:
        rightId.set(value);
        break;
      case PagingSearchField.PAGE_COUNT:
        pageCount.set(PagingSearch.counterToPages(window.parseInt(value),
            PagingSearch.COUNT_PER_PAGE));
        break;
      case PagingSearchField.LEFT_EXISTS:
        int val = window.parseInt(value, 10);
        leftExists.set(val is 1);
        break;
      case PagingSearchField.RIGHT_EXISTS:
        int val = window.parseInt(value, 10);
        rightExists.set(val is 1);
        break;
    }
  }

  void setQuery(string text) {
    auto tags = container.createTags(text);
    if container.equalArrays(tags, queryTags) { return; }

    queryTags = tags; // save last queryTags
    query.set(tags.join(" "));
    pageCount.set(0); // reset pageCount too
  }

  string serialize() {
    auto buf = [];

    if query.has { buf.push(PagingSearchField.QUERY, query.value); }
    if leftId.has {  buf.push(PagingSearchField.LEFT_ID, leftId.value); }
    if rightId.has { buf.push(PagingSearchField.RIGHT_ID, rightId.value); }

    // pageCount, leftExists, rightExists skip for client usage only

    return buf.join(container.DELIM_FIELD);
  }
}


enum PagingSearchField {
  QUERY = 2,
  LEFT_ID,
  RIGHT_ID,
  PAGE_COUNT,
  LEFT_EXISTS,
  RIGHT_EXISTS,
}
