
class GoogleMap extends container.Model {
  auto pageId = new container.String();
  auto style = new container.String();
  auto zoom = new container.Int();
  auto lat = new container.Float();
  auto lng = new container.Float();

  GoogleMap() {
    polymorph = NodeType.GOOGLE_MAP;

    enter();
  }

  void setField(string key, string value) {
    int field = window.parseInt(key);
    switch field {
      case container.ModelField.ID:
        id.set(value);
        break;
      case GoogleMapField.PAGE_ID:
        pageId.set(value);
        break;
      case GoogleMapField.STYLE:
        style.set(value);
        break;
      case GoogleMapField.ZOOM:
        zoom.set(parseInt(value));
        break;
      case GoogleMapField.LAT:
        lat.set(parseFloat(value));
        break;
      case GoogleMapField.LNG:
        lng.set(parseFloat(value));
        break;
    }
  }

  void enter() {
    style.listen(onStyleUpdate);
    zoom.listen(onZoomUpdate);
    lat.listen(onLatUpdate);
    lng.listen(onLngUpdate);
  }

  void exit() {
    style.unlisten(onStyleUpdate);
    zoom.unlisten(onZoomUpdate);
    lat.unlisten(onLatUpdate);
    lng.unlisten(onLngUpdate);
  }

  string serialize() {
    auto buf = [];

    if id.has { buf.push(container.ModelField.ID, id.value); }
    if pageId.has { buf.push(GoogleMapField.PAGE_ID, pageId.value); }
    if zoom.has { buf.push(GoogleMapField.ZOOM, zoom.value); }
    if lat.has { buf.push(GoogleMapField.LAT, lat.value); }
    if lng.has { buf.push(GoogleMapField.LNG, lng.value); }

    return buf.join(container.DELIM_FIELD);
  }

  void unserialize(object pices) {
    for int i = 0; i < pices.length; i=i+2 {
      setField(pices[i], pices[i+1]);
    }
  }

  bind void onStyleUpdate(string val, string old) {
    eventUpdate.notify2(id.value, [
      GoogleMapField.STYLE, val,
    ]);
  }

  bind void onZoomUpdate(int val, int old) {
    eventUpdate.notify2(id.value, [
      GoogleMapField.ZOOM, val,
    ]);
  }

  bind void onLatUpdate(float val, float old) {
    eventUpdate.notify2(id.value, [
      GoogleMapField.LAT, val,
    ]);
  }

  bind void onLngUpdate(float val, float old) {
    eventUpdate.notify2(id.value, [
      GoogleMapField.LNG, val,
    ]);
  }
}


enum GoogleMapField {
  PAGE_ID = 3, // container.ModelField.ID + TYPE + 1,
  STYLE,
  ZOOM,
  LAT,
  LNG,
  // TODO: add icon field
}
