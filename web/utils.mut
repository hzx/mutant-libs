
// TODO: refactor this
/* Tag tag(string name, object[] props, object[] events, object value, Tagable[] childs) { */
Tag tag(string name, object props, object events, object value, object childs) {
  Tag tg = new Tag();
  tg.name = name;

  if events isnot null {
    tg.events = events;
  }

  tg.create();

  if props isnot null {
    for int i = 0; i < props.length; i = i + 2 {
      tg.setProperty(props[i], props[i + 1]);
    }
  }

  if childs isnot null {
    for object child: childs {
      tg.append(child);
    }
  }

  if value isnot null {
    tg.setValue(value);
  }

  return tg;
}


/* View view(object clas, objects[] props, objects[] events, Tagable[] childs) { */
View view(object clas, object props, object events, object childs) {
  auto v = new clas();

  if props isnot null {
    for int i = 0; i < props.length; i = i + 2 {
      v[props[i]] = props[i+1];
    }
  }

  if events isnot null {
    v.events = events;
  }

  v.create();

  if childs isnot null {
    for object child: childs {
      v.append(child);
    }
  }

  return v;
}


// appendTag to body
void appendTag(Tagable element) {
  document.body.appendChild(element.getNode());
  element.enter();
}


bool equalArrays(object left, object right) {
  object l;
  object r;
  if left.length isnot right.length { return false; }
  for int i = 0; i < left.length; ++i {
    l = left[i];
    r = right[i];

    // TODO: bug cause parse only left[i]
    /* if left[i] isnot right[i] { return false; } */

    if l isnot r { return false; }
  }
  return true;
}

string trimString(string value) {
  int left = 0;
  int right = value.length;

  for int i = 0; i < right; ++i {
    if value.charAt(i) is " " {
      ++left;
    } else { break; }
  }

  for int i = right - 1; i > left; --i {
    if value.charAt(i) is " " {
      --right;
    } else { break; }
  }

  if right - left isnot value.length {
    return value.substr(left, right - left);
  } else {
    return value;
  }
}
