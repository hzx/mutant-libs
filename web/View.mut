
class View implements Tagable {
  Tagable parent = null;
  Tagable next = null;
  Tagable prev = null;
  Tagable element = null;
  bool isEnter = false;
  object events = [];

  void create() {
    element = tag("div", null, null, "override View.create", null);
  }

  void destroy() {
  }

  void enter() {
    if isEnter { return; }
    isEnter = true;
    element.enter();

    for int i = 0; i < events.length; i = i + 2 {
      this["event" + events[i]].listen(events[i+1]);
    }
  }

  void exit() {
    if !isEnter { return; }
    isEnter = false;
    element.exit();

    for int i = 0; i < events.length; i = i + 2 {
      this["event" + events[i]].unlisten(events[i+1]);
    }
  }

  string getId() {
    return element.getId();
  }

  object getNode() {
    return element.getNode();
  }

  tag getChild(string id) {
    return element.getChild(id);
  }

  void insert(Tagable child) {
    element.insert(child);
  }

  void insertBefore(Tagable child, string beforeHash) {
    element.insertBefore(child, beforeHash);
  }

  void append(Tagable child) {
    element.append(child);
  }

  void remove() {
    if parent is null { return; }
    if isEnter { exit(); }
    element.remove();
    parent = null;
    prev = null;
    next = null;
  }

  void removeChild(string hash) {
    element.removeChild(hash);
  }

  void setValue(string text) {
    element.setValue(text);
  }

  void setParent(Tagable parent_) {
    parent = parent_;
    element.setParent(parent_);
  }

  void listen(string name, object handler) {
    element.listen(name, handler);
  }

  void unlisten(string name, object handler) {
    element.unlisten(name, handler);
  }
}
