
class View implements Tagable {
  Tagable element = null;
  object style_ = null;
  bool isEnter = false;
  object events = [];

  void create() {
    element = tag("div", null, null, "override View.create", null);
  }

  void destroy() {
  }

  void enter() {
    if isEnter { return; }
    isEnter = true;
    element.enter();

    for int i = 0; i < events.length; i = i + 2 {
      this["event" + events[i]].listen(events[i+1]);
    }
  }

  void exit() {
    if !isEnter { return; }
    isEnter = false;
    element.exit();

    for int i = 0; i < events.length; i = i + 2 {
      this["event" + events[i]].unlisten(events[i+1]);
    }
  }

  string getId() {
    return element.getId();
  }

  object getNode() {
    return element.getNode();
  }

  Tagable getFirst() {
    return element.getFirst();
  }

  Tagable getLast() {
    return element.getLast();
  }

  Tagable getNext() {
    return element.getNext();
  }

  Tagable getPrev() {
    return element.getPrev();
  }

  Tagable getParent() {
    return element.getParent();
  }

  tag getChild(string id) {
    return element.getChild(id);
  }

  void insert(Tagable child) {
    element.insert(child);
  }

  void insertBefore(Tagable child, string beforeId) {
    element.insertBefore(child, beforeId);
  }

  void append(Tagable child) {
    element.append(child);
  }

  void remove() {
    if isEnter { exit(); }
    element.remove();
  }

  void removeChild(string hash) {
    element.removeChild(hash);
  }

  void moveChild(Tagable node, string beforeId) {
    element.moveChild(node, beforeId);
  }

  void updateChildId(string id, string old) {
    element.updateChildId(id, old);
  }

  void clear() {
    element.clear();
  }

  void setId(string id) {
    element.setId(id);
  }

  void setValue(string text) {
    element.setValue(text);
  }

  void setNext(Tagable node_) {
    element.setNext(node_);
  }

  void setPrev(Tagable node_) {
    element.setPrev(node_);
  }

  void setParent(Tagable parent_) {
    element.setParent(parent_);
  }

  void listen(string name, object handler) {
    element.listen(name, handler);
  }

  void unlisten(string name, object handler) {
    element.unlisten(name, handler);
  }
}
