
/* like Collection, but CollectionNode integrated */
// TODO: refactor - use container.Collection for childs

class Tag implements Tagable {
  string id = container.Hasher.generate();
  string name = null;
  object node = null;
  Tag parent = null;
  Tag first = null;
  Tag last = null;
  Tag next = null;
  Tag prev = null;

  bool isEnter = false;
  object events = [];
  object events__ = []; // n
  string value = "";
  object idToChilds_ = {};
  object idToChilds__ = {}; // n

  object styleBackup = null; // need for saving temporary style changes
  object styleBackup__ = null; // n
  int state = STATE_NORMAL;
  object style = null;
  object styleHover = null;
  object styleActive = null;
  object styleDisable = null;

  Observable observableValue_ = null;
  container.ObservableCollection observableCollection_ = null;
  string observableRender_ = null;

  object styleStates__ = {}; // n

  /* object dragStart = dragStart_; */
  /* object dragEnd = dragEnd_; */
  /* object dragHover = dragHover_; */
  /* object drop = drop_; */

  /* int code = 0; // for use data */
  /* object data = null; */
  string dataId = null;

  void create() {
    node = document.createElement(name);
  }

  void destroy() {
    node.element_ = null;
    node = null;
  }

  void enter() {
    if isEnter { return; }
    isEnter = true;

    for int i = 0; i < events.length; i = i + 2 {
      browser.addEvent(node, events[i], events[i+1]);
    }

    Tag cursor = first;
    while cursor isnot null {
      cursor.enter();
      cursor = cursor.getNext();
    }

    if observableValue_ isnot null {
      if observableRender_ is null {
        browser.log("render function for observable not set");
      } else {
        observableValue_.listen(onObservableValueUpdate);
      }
    }
  }

  void exit() {
    if !isEnter { return; }
    isEnter = false;

    for int i = 0; i < events.length; i = i + 2 {
      browser.removeEvent(node, events[i], events[i+1]);
    }

    /* for Tag child: childs { child.exit(); } */
    Tag cursor = first;
    while cursor isnot null {
      cursor.exit();
      cursor = cursor.getNext();
    }

    if observableValue_ isnot null {
      observableValue_.unlisten(onObservableValueUpdate);
    }
  }

  string getId() {
    return id;
  }

  object getNode() {
    return node;
  }

  Tagable getFirst() {
    return first;
  }

  Tagable getLast() {
    return last;
  }

  Tagble getNext() {
    return next;
  }

  Tagable getPrev() {
    return prev;
  }

  Tagable getParent() {
    return parent;
  }

  Tagable getChild(string id) {
    if id in idToChilds_ { return idToChilds_[id]; }
    return null;
  }

  void insert(Tagable child) {
    child.setPrev(null);
    child.setNext(first);
    if first isnot null {
      node.insertBefore(child.getNode(), first.getNode());
      first.prev = child;
    } else {
      node.insertBefore(child.getNode(), null);
    }
    if last is null { last = first; }
    first = child;
    idToChilds_[child.getId()] = child;
    if isEnter { child.enter(); }
    child.setParent(this);
  }

  void insertBefore(Tagable child, string beforeId) {
    if beforeId in idToChilds_ {
      Tagable before = idToChilds_[beforeId];
      child.setPrev(before.getPrev());
      child.setNext(before);
      if before.getPrev() isnot null {
        before.getPrev().setNext(child);
      }
      before.setPrev(child);
      if first is before { first = child; }
      node.insertBefore(child.getNode(), before.getNode());
      idToChilds_[child.getId()] = child;
      if isEnter { child.enter(); }
      child.setParent(this);
    } else {
      append(child);
    }
  }

  void append(Tagable child) {
    child.setPrev(last);
    child.setNext(null);
    if first is null { first = child; }
    if last isnot null { last.setNext(child); }
    last = child;
    node.appendChild(child.getNode());
    if isEnter { child.enter(); }
    idToChilds_[child.getId()] = child;
    child.setParent(this);
  }

  void remove() {
    if parent is null { return; }
    parent.removeChild(getId());
  }

  void removeChild(string hash) {
    if hash in idToChilds_ is false { return; }

    Tagable child = idToChilds_[hash];

    if isEnter { child.exit(); }

    node.removeChild(child.getNode());
    delete idToChilds_[hash];

    if first is child {
      first = child.getNext();
    }
    if last is child {
      last = child.getPrev();
    }

    if child.getNext() isnot null {
      child.getNext().setPrev(child.getPrev());
    }
    if child.getPrev() isnot null {
      child.getPrev().setNext(child.getNext());
    }

    child.setParent(null);
    child.setNext(null);
    child.setPrev(null);
  }

  void moveChild(Tagable node, string beforeId) {
    auto before = getChild(beforeId);
    if before isnot null {
      // dont move to the same place
      if node is before.getPrev() { return; }
      removeChild(node.getId());
      insertBefore(node, beforeId);
    } else {
      // dont move to the same place
      if node is last { return; }
      removeChild(node.getId());
      append(node);
    }
  }

  void updateChildId(string id, string old) {
    auto child = getChild(old);
    if child is null { return; }

    delete idToChilds_[old];
    idToChilds_[id] = child;

    child.setId(id);
  }

  void clear() { // remove all childs
    Tagable child = first;
    Tagable nxt;
    while child isnot null {
      nxt = child.getNext();
      if isEnter { child.exit(); }
      node.removeChild(child.getNode());
      child = nxt;
    }
    first = null;
    last = null;
    idToChilds_ = {};
  }

  void setId(string id_) {
    id = id_;
  }

  void setValue(string text) {
    value = text;
    browser.setText(node, text);
  }

  void setNext(Tagable node_) {
    next = node_;
  }

  void setPrev(Tagable node_) {
    prev = node_;
  }

  void setParent(Tagable parent_) {
    parent = parent_;
  }

  void listen(string name, object handler) {
    browser.addEvent(node, name, handler);
  }

  void unlisten(string name, object handler) {
    browser.removeEvent(node, name, handler);
  }

  void setHtml(string html) {
    node.innerHTML = html;
  }

  // TODO: think about refactoring this
  void setProperty(string name, object value) {
    switch name {
      case "id":
        id = value;
        break;
      case "style":
        style = value;
        setStyle(value);
        break;
      case "hover":
        styleHover = value;
        break;
      case "active":
        styleActive = value;
        break;
      case "disable":
        styleDisable = value;
        break;
      case "code":
        code = value;
        break;
      case "dataId":
        node.dataId = value;
        break;
      case "type":
        node.type = value;
        break;
      case "value":
        node.value = value;
        break;
      case "multiple":
        node.multiple = value;
        break;
      case "src":
        node.src = value;
        break;
      case "href":
        node.href = value;
        break;
      case "target":
        node.target = value;
        break;
      case "alt":
        node.alt = value;
        break;
      case "accept":
        node.accept = value;
        break;
      case "drop":
        drop = value;
        break;
      case "draggable":
        node.draggable = value;
        break;
      case "bind":
        observableValue_ = value;
        break;
      case "coll":
        observableCollection_ = value;
        break;
      case "render":
        observableRender_ = value;
        break;
      default:
        browser.log("unknown property name: " + name);
        break;
    }
  }

  void setStyle(object stylee) {
    browser.setStyle(getNode(), stylee);
  }

  void setStyleProperty(string name, string value) {
    browser.setStyleProperty(getNode(), name, value);
  }

  void setState(int statee) {
    switch statee {
      case STATE_NORMAL:
        if style { setStyle(style); }
        break;
      case STATE_HOVER:
        if styleHover { setStyle(styleHover); }
        break;
      case STATE_ACTIVE:
        if styleActive { setStyle(styleActive); }
        break;
      case STATE_DISABLE:
        if styleDisable { setStyle(styleDisable); }
        break;
    }
    state = statee;
  }

  bind void onObservableValueUpdate(object value, object old) {
    observableRender_(this, observableValue_);
  }
}
