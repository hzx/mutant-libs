
/* like Collection, but CollectionNode integrated */

class Tag implements Tagable {
  string id = container.Hasher.generate();
  string name = null;
  object node = null;
  Tagable parent = null;
  Tagable first = null;
  Tagable last = null;
  Tagable next = null;
  Tagable prev = null;

  bool isEnter = false;
  object events = [];
  string value = "";
  object idToChilds_ = {};

  object styleBackup = null; // need for saving temporary style changes
  int state = STATE_NORMAL;
  object style = null;
  object styleHover = null;
  object styleActive = null;

  void create() {
    node = document.createElement(name);
    node.element_ = this;
  }

  void destroy() {
    node.element_ = null;
    node = null;
  }

  void enter() {
    if isEnter { return; }
    isEnter = true;

    for int i = 0; i < events.length; i = i + 2 {
      browser.addEvent(node, events[i], events[i+1]);
    }

    Tagable cursor = first;
    while cursor isnot null {
      cursor.enter();
      cursor = cursor.next;
    }
  }

  void exit() {
    if !isEnter { return; }
    isEnter = false;

    for int i = 0; i < events.length; i = i + 2 {
      browser.removeEvent(node, events[i], events[i+1]);
    }

    /* for Tagable child: childs { child.exit(); } */
    Tagable cursor = first;
    while cursor isnot null {
      cursor.exit();
      cursor = cursor.next;
    }
  }

  string getId() {
    return id;
  }

  object getNode() {
    return node;
  }

  tag getChild(string id) {
    if id in idToChilds_ { return idToChilds_[id]; }
    return null;
  }

  void insert(Tagable child) {
    child.prev = null;
    child.next = first;
    if first isnot null { first.prev = child; }
    if last is null { last = first; }
    first = child;
    node.insertChild(child.getNode());
    idToChilds_[child.getId()] = child;
    if isEnter { child.enter(); }
    child.parent = this;
  }

  void insertBefore(Tagable child, string beforeHash) {
    if beforeHash in idToChilds_ {
      Tagable before = idToChilds_[beforeHash];
      child.prev = before.prev;
      child.next = before;
      if before.prev isnot null {
        before.prev.next = child;
      }
      before.prev = child;
      if first is before { first = child; }
      node.insertBefore(child.getNode(), before.getNode());
      idToChilds_[child.getId()] = child;
      child.parent = this;
    } else {
      insert(child);
    }
  }

  void append(Tagable child) {
    child.prev = last;
    child.next = null;
    if first is null { first = child; }
    if last isnot null { last.next = child; }
    last = child;
    node.appendChild(child.getNode());
    if isEnter { child.enter(); }
    idToChilds_[child.getId()] = child;
    child.parent = this;
  }

  void remove() {
    if parent is null { return; }
    parent.removeChild(getId());
  }

  void removeChild(string hash) {
    if hash in idToChilds_ {
      Tagable child = idToChilds_[hash];
      if isEnter { child.exit(); }
      node.removeChild(child.getNode());

      delete idToChilds_[hash];

      child.parent = null;
      child.next = null;
      child.prev = null;
    }
  }

  void clear() { // remove all childs
    Tagable child = first;
    Tagable nxt;
    while child isnot null {
      nxt = child.next;
      if isEnter { child.exit(); }
      node.removeChild(child.getNode());
      child = nxt;
    }
    first = null;
    last = null;
    idToChilds_ = {};
  }

  void setValue(string text) {
    value = text;
    browser.setText(node, text);
  }

  void setHtml(string html) {
    node.innerHTML = html;
  }

  void setProperty(string name, object value) {
    switch name {
      case "style":
        style = value;
        setStyle(value);
        break;
      case "hover":
        styleHover = value;
        break;
      case "active":
        styleActive = value;
      case "type":
        node.type = value;
        break;
      case "value":
        node.value = value;
        break;
      case "multiple":
        node.multiple = value;
        break;
      default:
        browser.log("unknown property name: " + name);
        break;
    }
  }

  void setStyle(object stylee) {
    browser.setStyle(getNode(), stylee);
  }

  void setStyleProperty(string name, string value) {
    browser.setStyleProperty(getNode(), name, value);
  }

  void setState(int statee) {
    switch statee {
      case STATE_NORMAL:
        if style { setStyle(style); }
        break;
      case STATE_HOVER:
        if styleHover { setStyle(styleHover); }
        break;
      case STATE_ACTIVE:
        if styleActive { setStyle(styleActive); }
        break;
    }
    state = statee;
  }
}
