
class CollectionView extends View {
  string name = "div";
  container.ObservableCollection collection = null; 
  object render = null;

  override void create() {
    element = tag(name, ["style", style_], null, null, null);
  }

  override void enter() {
    if isEnter { return; }
    base.enter();
    
    if collection {
      collection.eventUpdateId.listen(onUpdateId);
      collection.eventUpdate.listen(onUpdate);
      collection.eventReset.listen(onReset);
      collection.eventInsert.listen(onInsert);
      collection.eventInsertBefore.listen(onInsertBefore);
      collection.eventAppend.listen(onAppend);
      collection.eventMove.listen(onMove);
      collection.eventRemove.listen(onRemove);
    }
  }

  override void exit() {
    if !isEnter { return; }
    base.exit();

    if collection {
      collection.eventUpdateId.unlisten(onUpdateId);
      collection.eventUpdate.unlisten(onUpdate);
      collection.eventReset.unlisten(onReset);
      collection.eventInsert.unlisten(onInsert);
      collection.eventInsertBefore.unlisten(onInsertBefore);
      collection.eventAppend.unlisten(onAppend);
      collection.eventMove.unlisten(onMove);
      collection.eventRemove.unlisten(onRemove);
    }
  }

  bind void onUpdateId(string id, string old) {
    updateChildId(id, old);
  }

  bind void onUpdate(string id, object updates) {
    // TODO: implement after framework stabilization
  }

  bind void onReset() {
    clear();
  }

  bind void onInsert(object obj) {
    auto robj = render(obj);
    if robj isnot null {
      auto node = robj.getNode();
      node.dataId = obj.getId();
      insert(robj);
    }
  }

  bind void onInsertBefore(object obj, string beforeId) {
    auto robj = render(obj);
    if robj isnot null {
      auto node = robj.getNode();
      node.dataId = obj.getId();
      insertBefore(robj, beforeId);
    }
  }

  bind void onAppend(object obj) {
    auto robj = render(obj);
    if robj isnot null {
      auto node = robj.getNode();
      node.dataId = obj.getId();
      append(robj);
    }
  }

  bind void onMove(string id, string beforeId) {
    auto child = getChild(id);
    if child is null { return; }

    moveChild(child, beforeId);
  }

  bind void onRemove(string id) {
    removeChild(id);
  }
}
