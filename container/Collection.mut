
class Collection {
  object idToNodes_ = {};
  object first = null;
  object last = null;
  int count = 0;

  void updateId(string id, string old) {
    if old in idToNodes_ {
      object node = idToNodes_[old];
      delete idToNodes_[old];

      node.obj.getId() = id;
      idToNodes_[id] = node;
    }
  }

  void update(string id, object updates) {
    if (id in idToNodes_) is false { return; }

    object obj = idToNodes_[id].obj;
    string name;
    for int i = 0; i < updates.length; i = i + 2 {
      name = updates[i];
      if name is "1" {
        updateId(name, updates[i + 1]);
      } else {
        obj[name] = updates[i + 1];
      }
    }
  }

  void insert(object obj) {
    insertNode_({
      obj: obj,
      next: null,
      prev: null,
    });
  }

  void insertBefore(object obj, string beforeId) {
    object before = null;

    if beforeId in idToNodes_ {
      before = idToNodes_[beforeId];
    }

    insertBeforeNode_({
      obj: obj,
      next: null,
      prev: null,
    }, before);
  }

  void append(object obj) {
    appendNode_({
      obj: obj,
      next: null,
      prev: null,
    });
  }

  void move(string id, string beforeId) {
    if id in idToNodes_ {
      auto node = idToNodes_[id];
      removeNode(node);

      if beforeId in idToNodes_ {
        insertBeforeNode_(node, idToNodes_[beforeId]);
      } else {
        appendNode_(node);
      }
    }
  }

  void remove(string id) {
    if id in idToNodes_ { removeNode_(idToNodes_[id]); }
  }

  void clear() {
    count = 0;
    idToNodes_ = {};
    first = null;
    last = null;
  }

  object get(string id) {
    auto node = getNode_(id);
    if node isnot null { return node.obj; }
    return null;
  }

  void insertNode_(object node) {
    if node.obj.getId() in idToNodes_ {
      /* browser.log("node with the same id exists"); */
      return ;
    }
    count = count + 1;
    node.prev = null;
    node.next = first;
    if first isnot null { first.prev = node; }
    if last is null { last = node; }
    first = node;
    idToNodes_[node.obj.getId()] = node;
  }

  void insertBeforeNode_(object node, object before) {
    if node.obj.getId() in idToNodes_ {
      /* log("node with the same id exists"); */
      return ;
    }
    if before is null { return appendNode_(node); }


    if before.prev isnot null { before.prev.next = node; }
    count = count + 1;
    node.prev = before.prev;
    node.next = before;
    before.prev = node;
    idToNodes_[node.obj.getId()] = node;
  }

  void appendNode_(object node) {
    if node.obj.getId() in idToNodes_ {
      /* log("node with the same id exists"); */
      return;
    }

    count = count + 1;
    node.prev = last;
    node.next = null;
    if first is null { first = node; }
    if last isnot null { last.next = node; }
    last = node;
    idToNodes_[node.obj.getId()] = node;
  }

  object getNode_(string id) {
    if id in idToNodes_ { return idToNodes_[id]; }
    return null;
  }

  void removeNode_(object node) {
    count = count - 1;
    if first is node { first = null; }
    if last is node { last = null; }
    if node.prev isnot null { node.prev.next = node.next; }
    if node.next isnot null { node.next.prev = node.prev; }
    node.next = null;
    node.prev = null;
    delete idToNodes_[node.obj.getId()];
  }
}
