
class ObservableCollection extends Collection {
  auto eventUpdateId = new Event();
  auto eventUpdate = new Event();
  auto eventReset = new Event();
  auto eventInsert = new Event();
  auto eventInsertBefore = new Event();
  auto eventAppend = new Event();
  auto eventMove = new Event();
  auto eventRemove = new Event();

  // link collection
  object link = null;

  string parentId = null;
  int parentField = 0;

  int updateTimerId = 0;
  object updates_ = [];

  override void updateId(string id, string old) {
    base.updateId(id, old);
    eventUpdateId.notify2(id, old);
  }

  override void update(string id, object updates) {
    updateLocal(id, updates);
    updateLink(id, updates);
  }

  void updateLocal(string id, object updates) {
    base.update(id, updates);
    notifyUpdateLocal(id, updates);
  }

  void notifyUpdateLocal(string id, object updates) {
    eventUpdate.notify2(id, updates);
  }

  void updateLink(string id, object updates) {
    // debug
    console.log("ObservableCollection.updateLink:");
    console.log(link);
    console.log("id: " + id);
    console.log(updates);

    if link is null { return; }

    auto obj = get(id);

    // debug
    console.log(obj);

    if obj is null { return; }

    link.update({
      parentId: parentId,
      parentField: parentField,
      polymorph: obj.polymorph,
      id: id,
      updates: updates,
      obj: obj,
    });
  }

  override void insert(object obj) {
    insertLocal(obj);
    insertLink(obj);
  }

  void insertLocal(object obj) {
    base.insert(obj);
    obj.eventUpdate.listen(onObjectUpdate);
    eventInsert.notify(obj);
  }

  void insertLink(object obj) {
    if link is null { return; }

    link.insert({
      parentId: parentId,
      parentField: parentField,
      polymorph: obj.polymorph,
      obj: obj,
    });
  }

  override void insertBefore(object obj, string beforeId) {
    insertBeforeLocal(obj, beforeId);
    insertBeforeLink(obj, beforeId);
  }

  void insertBeforeLocal(object obj, string beforeId) {
    base.insertBefore(obj, beforeId);
    obj.eventUpdate.listen(onObjectUpdate);

    eventInsertBefore.notify2(obj, beforeId);
  }

  void insertBeforeLink(object obj, string beforeId) {
    // debug
    console.log("ObservableCollection.insertBeforeLink:");
    console.log(obj);

    if link is null { return; }

    link.insertBefore({
      parentId: parentId,
      parentField: parentField,
      polymorph: obj.polymorph,
      beforeId: beforeId,
      obj: obj,
    });
  }

  override void append(object obj) {
    appendLocal(obj);
    appendLink(obj);
  }

  void appendLocal(object obj) {
    base.append(obj);
    obj.eventUpdate.listen(onObjectUpdate);
    eventAppend.notify(obj);
  }

  void appendLink(object obj) {
    if link is null { return; }

    link.append({
      parentId: parentId,
      parentField: parentField,
      polymorph: obj.polymorph,
      obj: obj,
    });
  }

  override void move(string id, string beforeId) {
    moveLocal(id, beforeId);
    moveLink(id, beforeId);
  }

  void moveLocal(string id, string beforeId) {
    base.move(id, beforeId);
    eventMove.notify(id, beforeId);
  }

  void moveLink(string id, string beforeId) {
    if link is null { return; }

    link.move({
      parentId: parentId,
      parentField: parentField,
      id: id,
      beforeId: beforeId,
    });
  }

  override void remove(string id) {
    auto obj = removeLocal(id);
    if obj isnot null {
      removeLink(id, obj.polymorph);
    }
  }

  bool removeLocal(string id) {
    auto obj = get(id);
    if obj is null { return null; }

    obj.eventUpdate.unlisten(onObjectUpdate);
    base.remove(id);

    eventRemove.notify(id);

    return obj;
  }

  void removeLink(string id, string polymorph) {
    if link is null { return; }

    link.remove({
      parentId: parentId,
      parentField: parentField,
      polymorph: obj.polymorph,
      id: id,
    });
  }

  override void clear() {
    // unlisten all objects updates
    auto cursor = first;
    while cursor isnot null {
      cursor.obj.eventUpdate.unlisten(onObjectUpdate);
      cursor = cursor.next;
    }

    base.clear();
    eventReset.notify();
  }

  bind void onObjectUpdate(string id, object updates) {
    notifyUpdateLocal(id, updates);
    updateLink(id, updates);
  }
}
