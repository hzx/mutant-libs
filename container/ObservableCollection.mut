
class ObservableCollection extends Collection {
  auto eventUpdateId = new Event();
  auto eventUpdate = new Event();
  auto eventReset = new Event();
  auto eventInsert = new Event();
  auto eventInsertBefore = new Event();
  auto eventAppend = new Event();
  auto eventMove = new Event();
  auto eventRemove = new Event();

  int updateTimerId = 0;
  object updates_ = [];

  override void updateId(string id, string old) {
    base.updateId(id, old);
    eventUpdateId.notify2(id, old);
  }

  override void update(string id, object updates) {
    base.update(id, updates);
    eventUpdate.notify2(id, updates);
  }

  override void insert(object obj) {
    base.insert(obj);
    obj.eventUpdate.listen(onObjectUpdate);
    eventInsert.notify(obj);
  }

  override void insertBefore(object obj, string beforeId) {
    base.insertBefore(obj, beforeId);
    obj.eventUpdate.listen(onObjectUpdate);
    eventInsertBefore.notify2(obj, beforeId);
  }

  override void append(object obj) {
    base.append(obj);
    obj.eventUpdate.listen(onObjectUpdate);
    eventAppend.notify(obj);
  }

  override void move(string id, string beforeId) {
    base.move(id, beforeId);
    eventMove.notify2(id, beforeId);
  }

  override void remove(string id) {
    auto obj = get(id);
    if obj is null { return; }
    obj.eventUpdate.unlisten(onObjectUpdate);

    base.remove(id);
    eventRemove.notify(id);
  }

  override void clear() {
    // unlisten all objects updates
    auto cursor = first;
    while cursor isnot null {
      cursor.obj.eventUpdate.unlisten(onObjectUpdate);
      cursor = cursor.next;
    }

    base.clear();
    eventReset.notify();
  }

  bind void onObjectUpdate(string id, object updates) {
    eventUpdate.notify2(id, updates);
  }
}
