

class Model implements Collectable {
  auto id = new String();
  auto parent_ = null;

  object onUpdateParent_ = null;
  int updateTimerId_ = 0;
  object updates_ = {};

  Model() {
    id.code = ModelField.ID;
  }

  string getId() {
    return id.value;
  }

  string serialize();
  void unserialize(object pices);

  void setUpdateParent(object onUpdate) {
    onUpdateParent_ = onUpdate;
  }

  void notifyUpdate() {
    auto buf = [];
    for auto name in updates_ {
      buf.push(name, updates_[name]);
    }
    if buf.length is 0 { return; }

    onUpdateParent_(id.value, buf.join(DELIM_FIELD));
  }

  bind void onFieldUpdate(int code, object newval, object oldval) {
    if onUpdateParent_ is null { return; }

    var me = this;

    updates_[code] = newval;

    // cancel already queued update
    if updateTimerId_ isnot 0 {
      window.clearTimeout(updateTimerId_);
      updateTimerId_ = 0;
    }

    window.setTimeout(void () {
      me.notifyUpdate();
    }, 0);
  }
}


enum ModelField {
  ID = 1,
}


enum SyncName {
  OP = 1,
  NAME,
  PARAMS,
  BEFOREID,
  OBJ,
  ID,
}

enum SyncOp {
  NONE = 0,
  UPDATE,
  INSERT,
  APPEND,
  REMOVE,
  MOVE,
}

/* class Model { */
/*   // implement it */
/*   // int parseField(int code, string value); */
/*   void save(object buf) { */
/*   } */

/*   int init(string raw) { */

/*     return 0; */
/*   } */
/* } */
